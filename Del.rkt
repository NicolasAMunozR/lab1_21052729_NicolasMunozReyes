#lang racket

(define del (lambda (system)
              (lambda (conte)
                (if(equal? conte "*.*")
                   (make-system(get-name system)(get-drive system)(get-user system)
                               (filter (lambda (x) (< (length x) 6)) (list-ref system 3))
                               (filter (lambda (x) (>= (length x) 6)) (list-ref system 3))(get-fecha system))
                   (if (member conte (flatten (list-ref system 3)))
                       (make-system(get-name system)(get-drive system)(get-user system)
                                   (foldr (lambda (e acc)
                                            (if (and (list? e) (member conte (flatten e)))
                                                acc(cons e acc) ))'()(get-carpetas system))
                                   (foldr (lambda (e acc)(if (and (list? e) (member conte (flatten e)))(cons e acc)acc))
                                          '()(get-carpetas system))(get-fecha system))
                       (if(and(equal? (car(string-split conte ".")) "*")(member (last (string-split conte "."))
                                                                                (flatten(list-ref system 3))))
                          (make-system(get-name system)(get-drive system)(get-user system)
                                      (filter (lambda (sublst)
                                                (not (ormap
                                                      (lambda (x)(and (string? x)(regexp-match?
                                                                                  (regexp(string-append "."conte"$"))
                                                                                  x))) sublst)))
                                              (get-carpetas system))(filter (lambda (x)(not (member x(filter
                                                                        (lambda(sublst)(not (ormap (lambda (x)
                                                         (and (string? x)(regexp-match?(regexp (string-append "."conte"$"))
                                                                                       x))) sublst)))(get-carpetas system)))))
                                                                            (list-ref system 3))(get-fecha system))
                          (if(member (last (string-split conte "."))(flatten(list-ref system 3)))
                             (make-system(get-name system)(get-drive system)(get-user system)
                                         (filter (lambda (sublst)(not(ormap (lambda (x)(and (string? x)
                                         (regexp-match? (regexp (last (string-split conte "*"))) (car(caddr sublst)))
                                         (regexp-match? (regexp (first (string-split conte "*"))) (car(caddr sublst)))))
                                                                            sublst)))(list-ref system 3))
                                         (filter (lambda (x) (not (member x  (filter (lambda (sublst)
                                                            (not(ormap (lambda (x)(and (string? x)
                                         (regexp-match? (regexp (last (string-split conte "*"))) (car(caddr sublst)))
                                         (regexp-match? (regexp (first (string-split conte "*"))) (car(caddr sublst)))))
                                                                       sublst)))(list-ref system 3)))))(list-ref system 3))
                                         (get-fecha system))
                             (if(and(lambda (x)  (string-contains? (second x) conte))(string-contains?
                                                                                      (third (list-ref system 0)) conte))
                                (make-system(flatten(cons(cdr(cons(get-name system)(remove(list-ref(list-ref system 0)2)
                                                                                          (get-name system))))
                                                         (string-append(string-join(take(string-split(list-ref(list-ref system 0)2)"/")
                                                                                        (- (length(string-split(list-ref(list-ref system 0)2)"/"))1))"/")"/")))
                                            (get-drive system)(get-user system)(filter (lambda (x) (not (string-contains? (second x) conte)))
                                                                                       (list-ref system 3))
                                            (filter (lambda (x) (not (member x  (filter (lambda (x) (not (string-contains? (second x) conte)))
                                                                                        (list-ref system 3)))))(list-ref system 3))
                                            (get-fecha system))
                                (if(lambda (x)  (string-contains? (second x) conte))
                                   (make-system(get-name system)(get-drive system)(get-user system)
                                               (filter (lambda (x) (not (string-contains? (second x) conte))) (list-ref system 3))
                                               (filter (lambda (x) (not (member x  (filter (lambda (x) (not (string-contains?
                                                                                                             (second x) conte)))
                                                                                           (list-ref system 3)))))(list-ref system 3))
                                               (get-fecha system))
                                   (make-system(get-name system)(get-drive system)(get-user system)(get-carpetas system)(get-papelera system)
                                               (get-fecha system)))))))))))